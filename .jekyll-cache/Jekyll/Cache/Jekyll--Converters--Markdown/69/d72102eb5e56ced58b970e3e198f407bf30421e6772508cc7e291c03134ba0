I"g<h2 id="问题">问题</h2>

<ol>
  <li>kubernates 是什么？</li>
  <li>kubernates 解决了什么问题？</li>
  <li>kubernates 该如何使用？</li>
  <li>集群中资源是如何调度的？</li>
</ol>

<h2 id="k8s-是什么-解决了什么问题">k8s 是什么, 解决了什么问题</h2>

<p>kubernates 是 Google 公司开源的一个容器编排与调度管理框架, 当前由 CNCF 托管.</p>

<p>解决了分布式系统情况下, 容器的编排与调度问题.</p>

<h3 id="发展历史">发展历史</h3>

<ol>
  <li>2003-2004 年, Google 发布 Borg 系统, 3-4 人开发.  主要用于管理长时间运行的生产服务和批处理服务. Brog 将上述两种服务所需要的的机器统一成一个池子, 以便提高资源利用率, 同时降低成本. 之所以能够实现跨机器的资源共享以及进程隔离, 是因为可以拿到 Linux 内核的容器支持.``</li>
  <li>… 年, 越来越多的应用被开发并运行在 Borg上, Google 团队开发了一个工具系统. 工具系统提供配合和更新 job 的机制, 可以预测资源需求, 动态的推送配置文件, 服务发现, 负载均衡, 自动扩容, 机器的生命周期管理, 额度管理等等. 由于要适配不同团队的需求, Borg 发展成了 ad-hoc 系统(即席查询, 用户根据自己的需求，灵活的选择查询条件，系统能够根据用户的选择生成相应的统计报表)集合, Borg 使用者可以使用不同的配置语言和进程来配置与沟通.</li>
  <li>2006-2007 年, Paul Menage和Rohit Seth 提出了 cgroups, 并且被合并到2.6.24版的内核中</li>
  <li>2013 年左右, 处于提升 Borg 生态系统软件工程的愿景, Google 发布了 Omega 集群管理系统. Omega 把很多 Borg 内已经被认证的成功的模式搬过来, 同时从头开始搭建一个更加一致性的构架. 添加了控制面板, 调度器等等, 以此来优化偶尔发生的资源冲突问题.  同年, docker 正式出道.</li>
  <li>2014 年左右, Google 发布了 kubernates. 同年, Microsoft, Red Hat, IBM, Docker 等加入 kubernates 社区</li>
  <li>2015 年, 成立了 CNCF 基金会, 托管 kubernates</li>
  <li>2016 年左右, kubernates 成为主流. 在 CloudNative 2016 大会上, 来自全世界的贡献值和开发者一起交流kubernates, Fluentd, Promethues等云原生技术(采用开源堆栈 K8S+Docker 进行容器化，基于微服务架构提高灵活性和可维护性，借助敏捷方法、DevOps支持持续迭代和运维自动化，利用云平台设施实现弹性伸缩、动态调度、优化资源利用率)</li>
  <li>2017 年左右, 各大互联网厂商开始纷纷支持 kubernates. 同年, istio 正式出道. Docker 容器大战正式结束, 成功上位, 作为 kubernates 容器运行时的标配.</li>
  <li>2018 年左右, 无人不知 kubernates. 国内不论大小厂商开始进行云原生落地.</li>
</ol>

<h3 id="borgomegak8s关联">Borg/Omega/K8S关联</h3>

<p>参见: <a href="https://queue.acm.org/detail.cfm?id=2898444">Borg/Omega/K8S关联</a></p>

<h3 id="k8s特点">k8s特点</h3>

<ol>
  <li>可移植性: 支持公有云, 私有云, 混合云, 多重云</li>
  <li>可扩展性: 模块化, 插件化, 可挂载, 可组合</li>
  <li>自动化: 自动部署, 自动重启, 自动复制, 自动伸缩/扩展</li>
</ol>

<h2 id="k8s-该如何使用">k8s 该如何使用</h2>

<h3 id="环境准备篇">环境准备篇</h3>

<h4 id="本地开发环境">本地开发环境</h4>
<p>参见: <a href="https://github.com/chaimch/k8s-for-docker-desktop">本地开发环境</a></p>

<h4 id="云羊毛环境">云羊毛环境</h4>
<p>参见一: <a href="https://console.cloud.google.com/freetrial">GCP 羊毛</a></p>

<p>参见二: <a href="https://katacoda.com/learn">katacoda 羊毛</a></p>

<h3 id="入门">入门</h3>

<h4 id="自动补全提示">自动补全提示</h4>
<ol>
  <li>安装 bash-completion <code class="language-plaintext highlighter-rouge">yum install bash-completion</code></li>
  <li>设置 kubectl 的别称 <code class="language-plaintext highlighter-rouge">alias k=kubectl</code></li>
  <li>bash 环境下, 调整别称 k 的自动补全 <code class="language-plaintext highlighter-rouge">source &lt;(kubectl completion bash | sed s/kubectl/k/g)</code></li>
  <li>zsh 环境下, 调整 k 的自动补全 <code class="language-plaintext highlighter-rouge">source &lt;(kubectl completion zsh)</code></li>
  <li>设置切换名称空间别称 <code class="language-plaintext highlighter-rouge">alias kcd='k config set-context $(k config current-context) --namespace'</code></li>
</ol>

<h4 id="kubernates-官方">Kubernates 官方</h4>
<p>参见: <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernates Tutorials</a></p>

<h3 id="架构图">架构图</h3>
<p><img src="https://cdn.jsdelivr.net/gh/chaimch/FigureBed@master/uPic/architecture.png" alt="architecture" /></p>

<h3 id="组件功能">组件功能</h3>

<h4 id="kubectl">kubectl</h4>
<p>官方提供的 CLI, 可以以交互式对 Kubernates API Server 进行操作. kubectl 发送相应的 http 请求, 由 Kubernates API Server 处理后返回并展示出结果.</p>

<h4 id="kube-apiserver">kube-apiserver</h4>

<p>负责将 Kubernates 的资源组/资源版本/资源以 restful 风格的形式对外暴露并提供服务. Kubernates 集群中的所有组件都通过 kube-apiserver 组件操作资源对象.</p>

<h5 id="特点">特点</h5>

<ol>
  <li>所有资源对象都封装成 restful 风格的 api 接口进行管理</li>
  <li>集群状态管理和数据管理, 是唯一与 etcd 集群交互的组件</li>
  <li>拥有丰富的集群安全访问机制, 以及认证, 授权及准入控制器</li>
</ol>

<h4 id="kube-controller-manager">kube-controller-manager</h4>

<p>管理 Kubernates 集群中Node节点, Pod副本, 服务, Endpoint端点, Namespace 命名空间, Service Account 服务账户, ResourceQuota 等. eg: 某个节点宕机时候,  Controller Manager 会及时发现并执行自动化修复流程.</p>

<p>Controller Manager 具备高可用性, 基于 etcd 集群上的分布式锁实现领导者选举机制. 多个实例同时运行,  通过 kube-apiserver 提供的资源锁进行选举竞争.</p>

<p><img src="https://cdn.jsdelivr.net/gh/chaimch/FigureBed@master/uPic/image-20200908125907635.png" alt="image-20200908125907635" />
<img src="https://cdn.jsdelivr.net/gh/chaimch/FigureBed@master/uPic/image-20200908130029579.png" alt="image-20200908130029579" /></p>
:ET